{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.js","components/CardList.js","components/SerchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","searchField","Card","id","num","name","email","handleClick","onClick","className","alt","src","CardList","robots","onhandleClick","event","console","log","currentTarget","infoPage","open","document","write","username","website","phone","company","body","style","background","textAlign","lineHeight","color","focus","map","user","i","key","SerchBox","serchchange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fetch","then","response","json","onSerchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","dispatch","payload","target","value","store","createStore","action","Object","assign","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f347ff2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { CHANGE_SEARCH_FIELD } from './constants.js'\n\nconst initialState = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\t\n\t}\n}","import React from 'react';\n\nconst Card = ({ id, num,  name, email, handleClick }) => {\n\treturn (\n\t\t<div onClick={handleClick} id={num} className='tc bg-light-green dib br2 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='Robot' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst onhandleClick = (event) => {\n\t\tconsole.log(robots[event.currentTarget.id].name);\n\t\tconst infoPage=window.open(\"\", \"infoPage\", \"top=200, left=600, width=500, height=650\");\n\t\tinfoPage.document.write(\n\t  \t\t\t\"<img alt='Robot' src='https://robohash.org/\" + robots[event.currentTarget.id].id + \"?250x250' />\" + \"<br> <br>\" + \n\t  \t\t\t\"<strong>Name: </strong>\" + robots[event.currentTarget.id].name + \"<br>\" +\n\t  \t\t\t\"<strong>Username: </strong>\" + robots[event.currentTarget.id].username + \"<br>\" +\n\t  \t\t\t\"<strong>Email: </strong>\" + robots[event.currentTarget.id].email + \"<br>\" +\n\t  \t\t\t\"<strong>Website: </strong>\" + robots[event.currentTarget.id].website + \"<br>\" +\n\t  \t\t\t\"<strong>Phone number: </strong>\" + robots[event.currentTarget.id].phone + \"<br>\" +\n\t  \t\t\t\"<strong>Company Name: </strong>\" + robots[event.currentTarget.id].company.name + \"<br> <br>\" +\n\t  \t\t\t\"<button type='button' onClick='window.close()'> Close </button>\"\n  \t\t);\n  \t\tinfoPage.document.body.style.background = \"linear-gradient(to left, rgba(7,27,82,1) 0%, rgba(0,128,128,1) 100%)\";\n  \t\tinfoPage.document.body.style.textAlign = \"center\";\n  \t\tinfoPage.document.body.style.lineHeight = \"1.3\";\n  \t\tinfoPage.document.body.style.color = '#9eebcf';\n  \t\tinfoPage.focus();\n\t}\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tnum={i}\n\t\t\t\t\t\t\tid={robots[i].id}\n\t\t\t\t\t\t\tname={robots[i].name}\n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\thandleClick={onhandleClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SerchBox = ({ serchchange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue br4'\n\t\t\ttype='serch'\n\t\t\tplaceholder='Serch for Robot..'\n\t\t\tonChange={serchchange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SerchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      { props.children }\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n  \tthis.setState({ hasError: true})\n  }\n\n  render() {\n  \tif (this.state.hasError) {\n  \t\treturn <h1>Opssss.... </h1>\n  \t}\n  \treturn this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SerchBox from '../components/SerchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSerchField } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchField\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSerchChange: (event) => dispatch(setSerchField(event.target.value))\n\t}\n}\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(user => this.setState({ robots: user }));\n\t}\n\n\trender() {\n\t\tconst { robots } = this.state;\n\t\tconst { searchField, onSerchChange } =this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\treturn !robots.length ?\n\t\t\t<h1 className='tc f1'>Loading...</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFrieds</h1>\n\t\t\t\t\t<SerchBox serchchange={onSerchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from './constants.js'\n\n\nexport const setSerchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers';\nimport 'tachyons';\nimport App from './containers/App';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\t\n\nserviceWorker.unregister();\n"],"sourceRoot":""}